{"version":3,"file":"reform.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/Definitions/InitialFields/InitialField/InitialField.ts","../../src/Utils/ObjectFieldTransfer.ts","../../src/Definitions/InitialFields/ElementField/ElementField.ts","../../src/Definitions/InitialFields/FormInputField/FormInputField.ts","../../src/Definitions/InitialFields/SectionField/SectionField.ts","../../src/Definitions/InitialFields/SectionField/RootSectionField.ts","../../src/InputValidations/Validations.ts","../../src/Utils/Reactivity/Base/Subject.class.ts","../../src/Utils/Reactivity/Base/Observer.class.ts","../../src/Utils/Reactivity/EventObverser.ts","../../src/Reflection/Reflections/Reflection.ts","../../src/Utils/CreateElement.ts","../../src/Reflection/Reflections/ElementReflection.ts","../../src/Reflection/Reflections/InputReflection.ts","../../src/Reflection/Reflections/SectionReflection.ts","../../src/Reflection/Reflector.ts","../../src/reform.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { IInitialFied } from \"./IInitialField\";\nimport { IInitialFiedBase } from \"./IInitialFieldBase\";\n\n\nexport abstract class InitialFied implements IInitialFied {\n    content: string | IInitialFied[];\n\n    constructor(base?: IInitialFiedBase) {\n        this.content = base.content;\n    }\n}\n\n// PARAMETER => MANIFESTO => VIEW\n\n","export function ObjectFieldTransfer(from : {[key: string] : any}, target : {[key: string] : any}) {\n    for (const key in from) {\n        if (\n            key != \"__proto__\" &&\n            Object.prototype.hasOwnProperty.call(from, key) \n            && typeof from[key] !== \"function\") {\n            const element = from[key];\n            target[key] = element;\n        }\n    }\n}","import { InitialFied } from \"../InitialField/InitialField\";\nimport { IInitialFied } from \"../InitialField/IInitialField\";\nimport { IElementField } from \"./IElementField\";\nimport { IElementFieldBase } from \"./IElementFieldBase\";\nimport { ObjectFieldTransfer } from \"../../../Utils/ObjectFieldTransfer\";\nimport { ElementAttribute } from \"../../Types/ElementAttribute\";\n\n\nexport class ElementField extends InitialFied implements IElementField {\n    readonly isElement = true;\n    attributes: ElementAttribute[] = [];\n    reflection: HTMLElement;\n    content: IInitialFied[];\n    tag: string = \"\";\n    id: string = \"\";\n    class: string = \"\";\n\n    constructor(base?: IElementFieldBase) {\n        super(base)\n        ObjectFieldTransfer(base, this);\n    }\n\n}","import { ElementField } from \"../ElementField/ElementField\";\nimport { InputType } from \"../../Types/InputType\";\nimport { IInputField } from \"./IInputField\";\nimport { IInputFieldBase } from \"./IInputFieldBase\";\nimport { ObjectFieldTransfer } from \"../../../Utils/ObjectFieldTransfer\";\nimport { InitialFied } from \"../InitialField/index\";\nimport { IInputValidation } from \"../../../InputValidations/index\";\nimport { ElementAttribute } from \"../../Types/ElementAttribute\";\n\nexport class InputField<V = string> extends InitialFied implements IInputField<V> {\n    readonly isInput = true;\n    inputType : InputType;\n    name: string;\n    convertToFinalValue: (rawValue: V) => V;\n    isElement?: boolean;\n    isSection?: boolean;\n    id?: string;\n    label?: string;\n    initialValue?: V;\n    excludeOnFinalData?: boolean;\n    disabled?: boolean;\n    placeholder?: string;\n    labelClass?: string;\n    inputClass?: string;\n    labelAttributes?: ElementAttribute[];\n    inputAttributes?: ElementAttribute[];\n    template?: string;\n    validations?: IInputValidation[];\n\n    constructor(base : IInputFieldBase<V>) {\n        super(base);\n        ObjectFieldTransfer(base, this);\n        this.convertToFinalValue = base.convertToFinalValue;\n    }\n\n}","import { InitialFied } from \"../InitialField/InitialField\";\nimport { IInitialFied } from \"../InitialField/IInitialField\";\nimport { ISectionFieldBase } from \"./ISectionFieldInitial\";\nimport { ISectionField } from \"./ISectionField\";\nimport { ObjectFieldTransfer } from \"../../../Utils/ObjectFieldTransfer\";\n\n/**\n * Sections are represents object, array. In same time if there is provider, can be returned any specified value.\n * Sections is not fillable directly by user. This is a difference than @class InputField\n */\nexport class SectionField extends InitialFied implements ISectionField {\n    readonly isSection = true;\n    sectionName: string;\n    content: IInitialFied[];\n    name: string;\n    root = false;\n    convertToFinalValue: (hamObject: { [key: string]: any; }) => any;\n\n    constructor(base : ISectionFieldBase) {\n        super(base);\n        ObjectFieldTransfer(base, this);\n        this.convertToFinalValue = base.convertToFinalValue;\n    }\n\n    \n}\n\n","import { SectionField } from \"./SectionField\";\r\n\r\n\r\nexport class RootSectionField extends SectionField {\r\n    name = \"root\";\r\n    readonly root = true;\r\n}\r\n","import { IInputValidation } from \"./IInputValidation\";\r\n\r\nexport class EmailValidator implements IInputValidation {\r\n    /**Regex from angular source */\r\n    readonly regex = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\r\n    message = \"Please enter valid email address\";\r\n    readonly name = \"email\"\r\n    method(value: string): boolean {\r\n        return this.regex.test(value || \"\")\r\n    }\r\n}\r\n\r\nexport class NotEmpty implements IInputValidation {\r\n    readonly name = \"notEmpty\";\r\n    message = \"Please don't leave this area empty \";\r\n    method(value: string): boolean {\r\n        return (value != null) && (value.trim() != \"\");\r\n    }\r\n}\r\n\r\n\r\nexport class NeedToBeTrue implements IInputValidation {\r\n    readonly name = \"notEmpty\";\r\n    message = \"Please don't leave this area empty \";\r\n    method(value: string): boolean {\r\n        if (value) return true;\r\n        else return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Validates value greater than input or equals input\r\n */\r\nexport class MinimumNumber implements IInputValidation {\r\n    message: string;\r\n    readonly name = \"min\";\r\n\r\n    constructor(public minimumValue: number) {\r\n        this.message = \"Value is need to be greater or equal than \" + minimumValue;\r\n    }\r\n\r\n    method(value: string): boolean {\r\n        return (parseFloat(value) >= this.minimumValue)\r\n    }\r\n}\r\n/**\r\n * Validates value less than input or equals input\r\n */\r\nexport class MaximumNumber implements IInputValidation {\r\n    readonly name = \"min\";\r\n    message = \"\";\r\n    constructor(public maximumValue: number) {\r\n        this.message = \"Value is need to be less or equal than \" + maximumValue;\r\n    }\r\n\r\n    method(value: string): boolean {\r\n        return (parseFloat(value) <= this.maximumValue)\r\n    }\r\n}\r\n\r\n/**\r\n * Validates value greater than input\r\n */\r\nexport class NumberGreaterThan implements IInputValidation {\r\n    message: string;\r\n    readonly name = \"min\";\r\n\r\n    constructor(public minimumValue: number) {\r\n        this.message = \"Value is need to be greater than \" + minimumValue;\r\n    }\r\n\r\n    method(value: string): boolean {\r\n        return (parseFloat(value) > this.minimumValue)\r\n    }\r\n}\r\n\r\n/**\r\n * Validates value less than input\r\n */\r\nexport class NumberLessThan implements IInputValidation {\r\n    readonly name = \"min\";\r\n    message = \"\";\r\n    constructor(public maximumValue: number) {\r\n        this.message = \"Value is need to be less than \" + maximumValue;\r\n    }\r\n\r\n    method(value: string): boolean {\r\n        return (parseFloat(value) < this.maximumValue)\r\n    }\r\n}\r\n","import { ISubject } from './ISubject';\r\nimport { Observer } from './Observer.class';\r\n\r\nexport class Subject<T = any> implements ISubject<T> {\r\n\r\n    observers: Observer<T>[] = [];\r\n\r\n    notify(param : T): void {\r\n        for (const observer of this.observers) {\r\n            observer.update(this, param);\r\n        }\r\n    }\r\n\r\n    subscribe(observer: Observer<T>): void {\r\n        if (this.observers.indexOf(observer) == -1)\r\n            this.observers.push(observer);\r\n    }\r\n    unsubscribe(observer: Observer<T>): void {\r\n        const index = this.observers.indexOf(observer);\r\n        if (index > -1) this.observers.splice(index, 1);\r\n    }\r\n}","import { ISubject } from './ISubject';\r\nimport {IObserver } from \"./IObserver\";\r\n\r\n\r\nexport abstract class Observer<T = any> implements IObserver<T> {\r\n    abstract update(subject: ISubject, param : T): void;\r\n}\r\n","import { Observer } from './Base/Observer.class';\r\nimport { ISubject } from './Base/ISubject';\r\n\r\nexport class EventObserve<T = any> extends Observer<T> {\r\n\r\n    constructor(private updateEvent: (param : T) => any) {\r\n        super();\r\n    }\r\n\r\n    update(subject: ISubject, param : T): void {\r\n        this.updateEvent(param);\r\n    }\r\n\r\n}\r\n","\r\nimport { IInitialFied, ISectionField } from \"../../Definitions/index\";\r\nimport { Reflector } from \"../Reflector\";\r\nimport { SectionReflection } from \"./SectionReflection\";\r\n\r\nexport abstract class Reflection {\r\n  initialField: IInitialFied;\r\n  reflector: Reflector;\r\n\r\n  abstract parentSectionReflection: SectionReflection;\r\n\r\n  abstract constructReflection(sectionField: IInitialFied,\r\n    reflector: Reflector,\r\n    baseElement: HTMLElement,\r\n    parentSectionReflection: SectionReflection): void;\r\n\r\n  /**Sets error message visibility */\r\n  abstract setErrorMessageVisibility(value: boolean): void;\r\n}","import { Reflector } from \"../Reflection/Reflector\";\nimport { IElementField } from \"../Definitions/InitialFields/index\";\nimport { ElementReflection, Reflection } from \"../Reflection/index\";\n\n/**\n * Creates and returns a HTML Element by Element initial field\n * @param elementField A Element field instance for binding attributes and events and etc\n */\nexport function createElement(reflection: ElementReflection, reflector: Reflector, elementField: IElementField): HTMLElement {\n    const element = document.createElement(elementField.tag || \"div\");\n    if (elementField.class)\n        element.className = elementField.class;\n    const elementFieldAttributes = elementField.attributes?.filter(a => a != null);\n    if (elementFieldAttributes?.length > 0) {\n        for (let attributeIndex = 0; attributeIndex < elementFieldAttributes.length; attributeIndex++) {\n            const attribute = elementFieldAttributes[attributeIndex];\n            if ((attribute.key != \"class\" && attribute.key != \"style\") || attribute.value) {\n                element.setAttribute(attribute.key, attribute.value || \"\");\n            }\n\n        }\n    }\n\n    for (const key in elementField.eventBindings || {}) {\n        if (Object.prototype.hasOwnProperty.call(elementField.eventBindings, key)) {\n            const methods = elementField.eventBindings[key]?.filter(a => a != null);\n            for (let methodIndex = 0; methodIndex < methods?.length; methodIndex++) {\n                const method = methods?.[methodIndex];\n                element.addEventListener(key, (event => { method(reflection, event, reflector) }));\n            }\n        }\n    }\n    return element;\n}","import { IElementField } from \"../../Definitions/index\";\nimport { Reflection } from \"./Reflection\";\nimport { Reflector } from \"../Reflector\";\nimport { SectionReflection } from \"./SectionReflection\";\nimport { createElement } from \"../../Utils/CreateElement\";\n\n/**\n * ElementReflection class is a reflection class for arrange visual and structural \n * arrangement\n */\nexport class ElementReflection extends Reflection {\n    element: HTMLElement;\n    subReflections: Reflection[];\n    constructor(\n        public elementField: IElementField,\n        public reflector: Reflector,\n        private baseElement: HTMLElement,\n        public parentSectionReflection: SectionReflection\n\n    ) {\n        super();\n        this.constructReflection()\n    }\n\n    constructReflection() {\n        const selfClass = this;\n        this.initialField = this.elementField;\n        const element = createElement(selfClass, this.reflector,this.elementField);\n        this.baseElement.appendChild(element);\n        if (typeof this.elementField.content === \"string\") {\n            element.textContent = this.elementField.content;\n        }\n        else {\n            this.subReflections = this.reflector.expand(element, this.elementField, this.parentSectionReflection);\n        }\n        this.element = element;\n    }\n\n    getElementByName(name: string) {\n        return this.subReflections?.find(\n            //@ts-ignore\n            a => a[\"name\"] === name\n        )\n    }\n\n    setErrorMessageVisibility(value: boolean): void {\n        //Nothing... :)\n    }\n}","import { ElementField, IInputField, ISectionField, ValidationErrorMap } from \"../../Definitions/index\";\nimport { keyValue, KeyValue } from \"../../Definitions/Types/KeyValue\";\nimport { ElementReflection } from \"./ElementReflection\";\nimport { Reflection } from \"./Reflection\";\nimport { Reflector } from \"../Reflector\";\nimport { SectionReflection } from \"./SectionReflection\";\n\nexport class InputReflection extends Reflection {\n\n    value = \"\";\n    initialField: IInputField;\n    rawValue: string;\n    rawToFinalValue: (rawValue: string) => string;\n    validationErrors: ValidationErrorMap = {};\n    errorMessageFieldId: string;\n    private inputElementReflection: ElementReflection;\n    showErrorMessage: boolean;\n    private _messageElement: HTMLElement;\n    private _inputElement: HTMLInputElement;\n    private _baseElement: HTMLElement;\n\n    constructor(inputField: IInputField,\n        public reflector: Reflector,\n        baseElement: HTMLElement,\n        public parentSectionReflection: SectionReflection\n    ) {\n        super();\n        this.value = inputField.initialValue;\n        this.initialField = inputField;\n        this.constructReflection(inputField, reflector, baseElement, parentSectionReflection);\n    }\n\n\n    constructReflection(inputField: IInputField, reflector: Reflector, baseElement: HTMLElement, parentSectionReflection: SectionReflection): void {\n        if (this._baseElement) {\n            this._baseElement.innerHTML = \"\";\n            this._baseElement.innerText = \"\";\n        }\n\n        let inputHtml: string,\n            labelHtml: string,\n            messageHtml: string,\n            template = inputField.template || `\n            <div>$label</div>\n            <div>$input</div>\n            <div>$message</div>`;\n        //initializations\n        if (inputField.inputType === \"checkbox\") {\n            inputHtml = `<input reformjs-input type=\"checkbox\"> <span reformjs-input-label>${inputField.label}</span>`\n            labelHtml = `<span></span>`\n        }\n        else {\n            inputHtml = `<input reformjs-input type=\"${inputField.inputType}\">`\n            labelHtml = `<span reformjs-input-label>${inputField.label}</span>`\n        }\n        messageHtml = `<span reformjs-message></span>`\n\n        const initBundle = template.replace(\"$label\", labelHtml).replace(\"$input\", inputHtml).replace(\"$message\", messageHtml);\n        const elementBase = document.createElement(\"div\");\n        elementBase.innerHTML = initBundle;\n        const inputElement = elementBase.querySelector(\"[reformjs-input]\") as HTMLInputElement,\n            messageElement = elementBase.querySelector(\"[reformjs-message]\") as HTMLElement;\n\n\n        this._inputElement = inputElement;\n        this._messageElement = messageElement;\n        this._baseElement = baseElement;\n        if (this.initialField.placeholder) {\n            inputElement.placeholder = this.initialField.placeholder;\n        }\n        if (this.initialField.initialValue)\n            inputElement.value = this.initialField.initialValue;\n        inputElement.addEventListener(\"input\", event => {\n            const inputElement = event.target as HTMLInputElement;\n            let value: any;\n            if (inputField.inputType === \"checkbox\") {\n                value = inputElement.checked\n            }\n            else if (inputField.inputType === \"number\") {\n                value = inputElement.valueAsNumber\n            }\n            else {\n                value = inputElement.value\n            }\n            this.changeValue(value);\n        });\n        baseElement.appendChild(elementBase);\n    }\n\n    /**\n     * Changes value of input, triggered by input \n     * @param value the new value user typed\n     * */\n    private changeValue(value: string) {\n        this.rawValue = value;\n        if (this.rawToFinalValue) {\n            this.value = this.rawToFinalValue(value);\n        }\n        else\n            this.value = value;\n\n        this.parentSectionReflection.valueChanged();\n        this.validate()\n    }\n\n    /**\n     * Checks final value of input (after user typed and text is operated)\n     * is valid or invalid. If invalid, validation error will be in @field validationError with error message and issue name.\n     */\n    validate() {\n        this.validationErrors = {};\n        for (let validationIndex = 0; validationIndex < this.initialField.validations?.length; validationIndex++) {\n            const validation = this.initialField.validations[validationIndex];\n            if (validation) {\n                if (!validation.method(this.value)) {\n                    this.validationErrors[validation.name] = { invalid: true, message: validation.message };\n                }\n            }\n        }\n        this.setValidationText();\n    }\n\n    /**\n     * Updates error message element with first validation error if showing errors is enabled,\n     * if there is. Othervise, element will be hidden.\n     * That doesn't validate. It shows first validation error if there.\n     */\n    setValidationText() {\n        //TODO: When reactive initial field changes is ok, update here for this\n        const element = this._messageElement;\n        const errorKeys = Object.keys(this.validationErrors);\n        if ((errorKeys.length > 0) && this.showErrorMessage) {\n            element.style.display = \"block\";\n            element.textContent = this.validationErrors[errorKeys[0]].message;\n        }\n        else {\n            element.style.display = \"none\";\n            element.textContent = \"\";\n        }\n    }\n\n    /**\n     * Sets element externally, when section reflection set \n     * @param newValue new value\n     * @param emit If true, entire section notified value is changed. Defaultly True\n     */\n    setValueExternal(newValue: any, emit = true) {\n        const inputElement = this._inputElement;\n        const inputType = this.initialField.inputType;\n        if (inputType === \"checkbox\") {\n            inputElement.checked = newValue;\n        }\n        else if (inputType === \"number\" && parseInt(newValue)) {\n            inputElement.valueAsNumber = parseInt(newValue);\n        }\n        else {\n            inputElement.value = newValue\n        }\n        if (emit) this.changeValue(newValue);\n    }\n\n    setErrorMessageVisibility(value: boolean): void {\n        this.validate();\n        this.showErrorMessage = value;\n        this.setValidationText();\n    }\n}","import { ISectionField, ISectionFieldBase, ValidationErrorMap } from \"../../Definitions/index\";\r\nimport { Subject } from \"../../Utils/Reactivity/Base/Subject.class\";\r\nimport { Reflector } from \"../Reflector\";\r\nimport { InputReflection } from \"./InputReflection\";\r\nimport { Reflection } from \"./Reflection\";\r\n\r\nexport class SectionReflection extends Reflection {\r\n\r\n\r\n    readonly subReflections: Reflection[] = [];\r\n    initialField: ISectionFieldBase;\r\n    onValueChange: Subject<void>\r\n    rawValue: { [key: string]: any; };\r\n\r\n    constructor(\r\n        sectionField: ISectionField,\r\n        reflector: Reflector,\r\n        baseElement: HTMLElement,\r\n        public parentSectionReflection: SectionReflection\r\n    ) {\r\n        super();\r\n        this.constructReflection(sectionField, reflector, baseElement, parentSectionReflection);\r\n    }\r\n\r\n    constructReflection(sectionField: ISectionField, reflector: Reflector, baseElement: HTMLElement, parentSectionReflection: SectionReflection): void {\r\n        this.onValueChange = new Subject();\r\n        this.initialField = sectionField;\r\n        const inheritedSection = sectionField.root ? this : parentSectionReflection;\r\n        reflector.expand(baseElement, sectionField, this);\r\n    }\r\n\r\n    valueChanged() {\r\n        this.rawValue = this.collectSectionData();\r\n        if (this.parentSectionReflection) {\r\n            this.parentSectionReflection.valueChanged();\r\n        }\r\n        else {\r\n            this.onValueChange.notify()\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getValue(mode: \"final\" | \"raw\", showGhost = false) {\r\n        return this.collectSectionData(mode)\r\n    }\r\n\r\n    /**\r\n     * Collects data under that's subsections\r\n     * @param mode Final or Raw mode\r\n     * @param callback callback that triggered with fetched data\r\n     */\r\n    private dataCollection(mode: \"final\" | \"raw\", callback: (incomeValue: any, name?: string) => any) {\r\n        const usefulReflections = this.subReflections.filter(a => a.initialField.isInput || a.initialField.isSection);\r\n        for (let reflectionIndex = 0; reflectionIndex < usefulReflections.length; reflectionIndex++) {\r\n            const reflection = usefulReflections[reflectionIndex];\r\n            if (reflection.initialField.isInput) {\r\n                const inputReflection = reflection as InputReflection;\r\n                if (inputReflection.value)\r\n                    callback(inputReflection.value, inputReflection.initialField.name)\r\n            }\r\n            else if (reflection.initialField.isSection) {\r\n                const sectionReflection = reflection as SectionReflection;\r\n                const value = sectionReflection.collectSectionData(mode);\r\n                if (value && ((typeof value != \"object\") || Object.keys(value).length > 0))\r\n                    callback(value, sectionReflection.initialField.name)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**Converts raw data into intended value specified in initial field */\r\n    convertDataByMode(data: any, mode: \"final\" | \"raw\") {\r\n        if ((mode === \"final\") && (this.initialField.convertToFinalValue)) {\r\n            return this.initialField.convertToFinalValue(data)\r\n        }\r\n        else\r\n            return data\r\n\r\n    }\r\n\r\n    collectSectionData(mode: \"final\" | \"raw\" = \"final\") {\r\n        if (this.initialField.arraySectionRaw) {\r\n            const array: any[] = [];\r\n            this.dataCollection(mode, (value) => {\r\n                array.push(value)\r\n            });\r\n            return this.convertDataByMode(array, mode);\r\n        }\r\n        else {\r\n            const objectMap: { [key: string]: any } = {};\r\n            this.dataCollection(mode, (value, name) => {\r\n                objectMap[name] = value;\r\n            });\r\n            return this.convertDataByMode(objectMap, mode);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * Collects all validation error and presents them like:\r\n    * {\r\n    *   'age': {atLeast: ...},\r\n    *   'name': {required: ...},\r\n    *   'email': {required: ...},\r\n    *   'address.city': {required: ...}\r\n    * } \r\n    * (3 input and 1 section field contains 'city' input)\r\n    */\r\n    collectValidationErrors(): { [key: string]: ValidationErrorMap } {\r\n        const fieldNameHeader = this.initialField.name ? `${this.initialField.name}.` : '';\r\n        const errorList: { [key: string]: ValidationErrorMap } = {};\r\n        for (let subFieldIndex = 0; subFieldIndex < this.subReflections.length; subFieldIndex++) {\r\n            const subReflection = this.subReflections[subFieldIndex];\r\n            if (subReflection.initialField.isInput) {\r\n                const inputReflection = (subReflection as InputReflection);\r\n                inputReflection.validate();\r\n                errorList[fieldNameHeader + subReflection.initialField.name] = inputReflection.validationErrors;\r\n            }\r\n            else if (subReflection.initialField.isSection) {\r\n                const subReflectionValidationErrors = (subReflection as SectionReflection).collectValidationErrors();\r\n                for (const key in subReflectionValidationErrors) {\r\n                    if (Object.prototype.hasOwnProperty.call(subReflectionValidationErrors, key)) {\r\n                        const validationErrorMap = subReflectionValidationErrors[key];\r\n                        if (validationErrorMap != null && (Object.keys(validationErrorMap).length > 0))\r\n                            errorList[fieldNameHeader + key] = validationErrorMap;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return errorList;\r\n    }\r\n\r\n    /**\r\n     * Sets corresponding values of section \r\n     * @param data incoming new data\r\n     */\r\n    setValue(data: any) {\r\n        if (data instanceof Object) {\r\n            const dataAsObj = data as { [key: string]: any };\r\n            for (const key in dataAsObj) {\r\n                if (Object.prototype.hasOwnProperty.call(dataAsObj, key)) {\r\n                    const value = dataAsObj[key];\r\n                    if (\r\n                        (typeof value != \"function\") &&\r\n                        (key != \"__proto__\")\r\n                    ) {\r\n                        const reflection = this.findSubReflectionByName(key);\r\n                        if (reflection.initialField.isSection) {\r\n                            (reflection as SectionReflection).setValue(value);\r\n                        }\r\n                        else if (reflection.initialField.isInput) {\r\n                            (reflection as InputReflection).setValueExternal(value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds reflection under this' first level sub reflections\r\n     * @param key name of reflection/field\r\n     */\r\n    findSubReflectionByName(key: string) {\r\n        return this.subReflections?.find(\r\n            refl => refl.initialField.name === key\r\n        )\r\n    }\r\n\r\n    setErrorMessageVisibility(value: boolean): void {\r\n        for (let reflectionIndex = 0; reflectionIndex < this.subReflections.length; reflectionIndex++) {\r\n            const reflection = this.subReflections[reflectionIndex];\r\n            reflection.setErrorMessageVisibility(value);\r\n        }\r\n    }\r\n\r\n}","import { IInputField, IInitialFiedBase } from \"../Definitions/index\";\nimport { IElementField } from \"../Definitions/InitialFields/ElementField/index\";\nimport { IInitialFied } from \"../Definitions/InitialFields/InitialField/IInitialField\";\nimport { ISectionField, RootSectionField } from \"../Definitions/InitialFields/SectionField/index\";\nimport { Subject } from \"../Utils/Reactivity/Base/Subject.class\";\nimport { EventObserve } from \"../Utils/Reactivity/EventObverser\";\nimport { ElementReflection } from \"./Reflections/ElementReflection\";\nimport { InputReflection } from \"./Reflections/InputReflection\";\nimport { Reflection } from \"./Reflections/Reflection\";\nimport { SectionReflection } from \"./Reflections/SectionReflection\";\n\nexport class Reflector {\n    baseElement: HTMLElement;\n    rootSectionReflection: SectionReflection;\n    idMap: { [reflectionId: string]: Reflection } = {};\n    onValueChange: Subject<void>;\n\n    constructor(public rootManifest: RootSectionField) {\n        this.onValueChange = new Subject();\n    }\n\n    expandThere(elementOrSelector: HTMLElement | string) {\n\n        this.baseElement = null;\n        if (typeof elementOrSelector === \"string\") {\n            this.baseElement = document.querySelector(elementOrSelector);\n        }\n        else {\n            this.baseElement = elementOrSelector;\n        }\n        if (this.baseElement) {\n            this.rootSectionReflection = new SectionReflection(this.rootManifest, this, this.baseElement, null)\n            this.rootSectionReflection.onValueChange.subscribe(\n                new EventObserve(value => {\n                    this.onValueChange.notify(value)\n                })\n            )\n        }\n        else {\n            throw \"No provided element. Please make sure element is not null\"\n        }\n    }\n\n    /**\n     * Expands stated initial fields into a base element. Returns reflection instances of initial field contents these are expanded now\n     * @param baseElement the element where is expanded in\n     * @param initialField the initial parent will be expanded\n     * @param parentSectionReflection the parent section reflection of that initial field\n     */\n    expand(baseElement: HTMLElement, initialField: IInitialFied, parentSectionReflection?: SectionReflection): Reflection[] {\n        /** in section, no element changes, content expanded into same element\n         * in element, new element will be created and contents expanded into them\n         */\n        const fields = initialField.content, reflections : Reflection[] = [];\n        if (fields instanceof Array) {\n            for (let index = 0; index < fields.length; index++) {\n                const field = fields[index] as IInitialFied;\n\n                let reflection: Reflection;\n                if (field.isSection) {\n                    reflection = new SectionReflection(\n                        field as ISectionField,\n                        this,\n                        baseElement, parentSectionReflection);\n                }\n                if (field.isElement) {\n                    const elementField = field as IElementField;\n                    reflection = new ElementReflection(elementField, this, baseElement, parentSectionReflection);\n                }\n\n                if (field.isInput) {\n                    reflection = new InputReflection(field as IInputField, this, baseElement, parentSectionReflection)\n                }\n                if (parentSectionReflection && reflection && !field.isElement) { \n                    parentSectionReflection.subReflections.push(reflection);\n                    reflections.push(reflection);\n                }\n                if (reflection?.initialField?.id) { \n                    this.idMap[reflection.initialField.id] = reflection;\n                 }\n            }\n            return reflections\n        }\n\n    }\n\n    /**\n     * Finds reflection by id that provided in initial field\n     * @param id id field of initial field before reflected\n     */\n    findReflectionById(id: string): Reflection | null {\n        return this.idMap[id]\n    }\n\n    /**\n     * Returns value of form\n     * @param final if final is true and any section has convertToFinalValue method, \n     * section value is will be return of convertToFinalValue method\n     */\n    getValue(final = true) {\n        return this.rootSectionReflection.getValue(final ? \"final\" : \"raw\");\n    }\n\n    /**\n     * Sets value of root section by corresponding fields\n     * @param data incoming data\n     * @param isIntegrityImportant (Not stable) when missing fields on all sections, exception will be raised\n     */\n    patchValue(data : {[key : string] : string}, isIntegrityImportant = false) {\n        //TODO: integrity\n        this.rootSectionReflection.setValue(data);\n    }\n   \n    collectValidationErrors() {\n        return this.rootSectionReflection.collectValidationErrors();\n    }\n\n    setErrorMessageVisibility(visible : boolean) {\n      this.rootSectionReflection.setErrorMessageVisibility(visible)\n    }\n\n}","import * as Reform from \"./main\";\r\n//@ts-ignore\r\nwindow[\"Reform\"] = Reform;\r\nexport default Reform;\r\n"],"names":[],"mappings":"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"}